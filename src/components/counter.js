import React from 'react';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import * as actions from "../actions"; //actions это объект у которого есть 3 функции inc, dec, rnd

const Counter = ({ counter, inc, dec, rnd }) => { //добавляем в пропс counter, inc, dec, rnd
  return (
      <div className="jumbotron">
          <h2>{counter}</h2>
          <button
              onClick={dec}
              className="btn btn-primary btn-lg">DEC</button>
          <button
              onClick={inc}
              className="btn btn-primary btn-lg">INC</button>
          <button
              onClick={rnd}
              className="btn btn-primary btn-lg">RND</button>
      </div>
  );
};

const mapStateToProps = (state) => { //это функция, которая получит текущий state из redux-store. Ее задача вернуть те значения props которые получит в результате Counter.
    return {
        counter: state //нашему Counter нужно только 1 свойство, которое наз. counter. Возвращаем каунтер, который является всем стейтом
    }
};

export default connect(mapStateToProps, actions)(Counter); //используем connect. это функция, которая возвращает функцию. передаются параметры конфигурации mapStateToProps. Затем туда передается Counter. Эта функция вернет новый компонент, который оборачивает Counter. Это компонент который связывает реакт и редакс
//Этот компонент будет брать из store те значение, что нужны Counter для работы и передавать их в Counter

//connect внутри себя создает новый компонент. Этот компонент оборачивает наш компонент Counter. Внутри этого компонента используя context API мы получаем доступ ко всему store. И для того чтобы каким-то образом получить значение из store и передать их в Counter мы используем функцию mapStateToProps.
// На вход этой функции передается текущий state из store. В reducer мы установили initialState 15, соответственно когда этот компонент получит store - он вызовет нашу функцию mapStateToProps, получит текущий state (у нас - 15), значение 15 мы присвоим свойство которое называется counter, это свойство получит компонент-обертка, который в свою очередь передаст это в компонент Counter.

//функцию mapDispatchToProps мы передаем в качестве второго аргумента в функцию connect
//функция коннект будет работать с нашей новой функцией mapDispatchToProps точно так же как она работает с mapStateToProps, только вместо аргумента она будет передавать функцию dispatch (это та самая функция, которая принимает новый action)
//и таким образом функция inc: () => dispatch({type: 'INC'}), которая внутри себя вызывает dispatch попадет к нашему объекту Counter в качестве свойства inc. Это свойство inc затем будет использовано как event-listener для кнопки increment.
// И когда пользователь нажмет на эту кнопку, произойдет сразу несколько действий: мы вызовем функцию inc, функция inc вызовет функцию dispatch и передаст в store новый action. Наша функция reducer получит это действие и обновит значение в store и после этого новое значение Counter снова придет в этот компонент благодаря функции mapStateToProps. Компонент получит новое свойство, отрисуется и покажет на экране новое значение счетчика

//функция connect это НОС, эта функция создает новый компонент-обертку, который отвечает за чтобы проинтегрировать наш компонент с redux store. Для того чтобы этот новый компонент работал ему нужно знать какие именно значения получить из store и как обработать функцию dispatch.
//Для этого у нас есть 2 функции, которые мы должны передать в коннект:
//1) mapStateToProps - она принимает на вход state и возвращает объект, ключи у которых это свойства, которые мы присвоим нашему компоненту, а значения это значаения из state, которые мы получим или вычислим
//2) mapDispatchToProps - работает так же как mapStateToProps, только вместо того чтобы использовать state она внутри себя использует функцию dispatch и в качестве значений мы передаем функции, которые наш компонент сможет использовать для того чтобы диспетчить события в store, то есть изменять глобальное состояние.
//Благодаря такой интеграции наш компонент ничего не знает про redux, этот компонент полностью независим от redux store.

//вместо функции mapDispatchToProps мы передаем объект с теми actionCreator-ами, которые мы хотим использовать с нашим компонентом и функция connect свяжет их сама с функцией dispatch